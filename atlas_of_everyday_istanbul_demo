<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Atlas of Everyday Istanbul ‚Äî Demo</title>
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
  />
  <style>
    :root {
      --bg: #0b1020;
      --panel: #121a33;
      --text: #e9eefc;
      --muted: #a9b4d8;
      --accent: #7aa2ff;
    }
    html, body { height: 100%; margin: 0; background: var(--bg); color: var(--text); font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial, sans-serif; }
    .wrap { display: grid; grid-template-columns: 340px 1fr; height: 100%; }
    #sidebar { background: var(--panel); border-right: 1px solid rgba(255,255,255,0.06); overflow-y: auto; }
    #map { height: 100%; width: 100%; }
    .brand { padding: 16px 16px 8px; border-bottom: 1px solid rgba(255,255,255,0.06); }
    .brand h1 { font-size: 18px; margin: 0 0 6px; }
    .brand p { margin: 0; font-size: 12px; color: var(--muted); }
    .list { padding: 8px 8px 20px; }
    .card { background: rgba(255,255,255,0.03); border: 1px solid rgba(255,255,255,0.08); border-radius: 14px; padding: 12px; margin: 10px 8px; cursor: pointer; transition: transform .15s ease, background .15s ease; }
    .card:hover { background: rgba(255,255,255,0.06); transform: translateY(-1px); }
    .title { font-weight: 600; font-size: 14px; margin-bottom: 4px; }
    .meta { color: var(--muted); font-size: 12px; }
    .leaflet-popup-content { margin: 10px 10px 6px; }
    .pin-title { margin: 0 0 6px; font-size: 16px; font-weight: 700; color: #0b1020; }
    .pin-body { margin: 0 0 8px; font-size: 13px; line-height: 1.45; color: #0b1020; }
    .pin-meta { font-size: 12px; color: #26304f; }
    .legend { position: absolute; z-index: 500; right: 12px; top: 12px; background: rgba(255,255,255,0.92); border-radius: 12px; padding: 8px 10px; color: #0b1020; font-size: 12px; border: 1px solid rgba(0,0,0,0.1); }
    .legend b { color: #0b1020; }
    .footer { position: absolute; z-index: 500; left: 360px; bottom: 10px; background: rgba(18,26,51,0.9); color: var(--muted); font-size: 12px; padding: 6px 10px; border-radius: 10px; }
    @media (max-width: 900px) { .wrap { grid-template-columns: 1fr; } #sidebar { height: 42%; } #map { height: 58%; } .footer { left: 10px; }
    }
    /* Ambient controls */
    .btn-ambient { display:inline-block; font: inherit; background: #7aa2ff; color: #0b1020; border: none; padding: 8px 10px; border-radius: 10px; cursor: pointer; }
    .btn-ambient:hover { filter: brightness(1.05); }
    .amb-note { font-size: 12px; color: #26304f; margin-top: 6px; }
    /* Custom Istanbul pin icons */
    .ist-pin { border: 0; background: transparent; }
    .ist-pin .pin { position: relative; width: 36px; height: 36px; border-radius: 12px; background: var(--pin, #7aa2ff); display: grid; place-items: center; box-shadow: 0 6px 14px rgba(0,0,0,.25), inset 0 0 0 2px rgba(255,255,255,.35); }
    .ist-pin .pin::after { content: ""; position: absolute; left: 50%; bottom: -8px; transform: translateX(-50%) rotate(45deg); width: 14px; height: 14px; background: var(--pin, #7aa2ff); box-shadow: 2px 2px 8px rgba(0,0,0,.15); }
    .ist-pin .glyph { font-size: 18px; filter: drop-shadow(0 1px 1px rgba(0,0,0,.25)); }
  </style>
</head>
<body>
  <div class="wrap">
    <aside id="sidebar">
      <div class="brand">
        <h1>Atlas of Everyday Istanbul</h1>
        <p>Demo map ‚Ä¢ Click a card to fly to a story pin.</p>
      </div>
      <div class="list" id="pinList"></div>
    </aside>
    <main id="map"></main>
  </div>
  <div class="legend">Use mouse/trackpad to pan/zoom ‚Ä¢ Click pins for stories</div>
  <div class="footer">Tip: This is a demo. Replace entries in <b>pins</b> (inside the HTML) with your students' stories.</div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <script>
    'use strict';

    // Helper: convert newlines to <br> safely
    const nl2br = (s = '') => String(s).replace(/\n/g, '<br>');

    // --- Demo data: edit/extend this array with student entries ---
    // Per-locality icon suggestions (emoji + color)
    // You can change glyph/color per pin to match its vibe/location
    const defaultIconSpec = { glyph: 'üìç', color: '#7aa2ff' };

    const pins = [
      {
        id: 'kumkapi',
        coords: [41.0019, 28.9616],
        location: 'Kumkapƒ± Fish Market, Fatih',
        title: 'From Armenian Taverns to Syrian Seafood Stalls',
        text: `Kumkapƒ± has long been a meeting point of cultures in Istanbul. In the early 20th century, the neighborhood was famous for its Armenian taverns, where mezes and music mixed with political debates. Today, many of those taverns are gone, but the tradition of multicultural dining lives on. Along the narrow streets, you hear Turkish, Kurdish, Arabic, and Armenian spoken side by side.

Since 2011, Syrian families have opened small seafood restaurants tucked between fish stalls. Their menus combine Levantine spices with the traditional Turkish meze spread. A waiter told us: ‚ÄúPeople come here not just to eat, but to feel like they are part of Istanbul‚Äôs story.‚Äù`,
        meta: 'Languages: TR ‚Ä¢ AR ‚Ä¢ HY ‚Ä¢ Collected: Mar 2025 ‚Ä¢ Consent: public space, no faces',
        icon: { glyph: 'üêü', color: '#4fd1c5' },
        ambient: [
          { label: 'Seagulls', volume: 0.35, loop: true,
            sources: [
              { src: 'https://upload.wikimedia.org/wikipedia/commons/4/43/Gull_1.ogg', type: 'audio/ogg' },
              { src: 'https://upload.wikimedia.org/wikipedia/commons/transcoded/4/43/Gull_1.ogg/Gull_1.ogg.mp3?download=', type: 'audio/mpeg' }
            ]
          },
          { label: 'Waves', volume: 0.25, loop: true,
            sources: [
              { src: 'https://upload.wikimedia.org/wikipedia/commons/1/1f/Waves.ogg', type: 'audio/ogg' },
              { src: 'https://upload.wikimedia.org/wikipedia/commons/transcoded/1/1f/Waves.ogg/Waves.ogg.mp3?download=', type: 'audio/mpeg' }
            ]
          },
          { label: 'Restaurant ambience', volume: 0.2, loop: true,
            sources: [
              { src: 'https://upload.wikimedia.org/wikipedia/commons/b/b5/Restaurant_ambience.ogg', type: 'audio/ogg' },
              { src: 'https://upload.wikimedia.org/wikipedia/commons/transcoded/b/b5/Restaurant_ambience.ogg/Restaurant_ambience.ogg.mp3?download=', type: 'audio/mpeg' }
            ]
          }
        ]
      },
      {
        id: 'moda',
        coords: [40.9838, 29.0252],
        location: 'Moda Sahili, Kadƒ±k√∂y',
        title: 'Where Languages Mix with the Sound of Waves',
        text: `On summer evenings, the Moda seaside becomes a gathering point for young Syrians, Kurds, Greeks, and expats. Conversations flow in Arabic, Turkish, English, and occasionally Greek. For many newcomers, Moda offers both anonymity and belonging ‚Äî a place where speaking a different language in public feels safe. One student said, ‚ÄúHere nobody asks where you‚Äôre from; everyone is just enjoying the sea breeze.‚Äù`,
        meta: 'Languages: TR ‚Ä¢ AR ‚Ä¢ EN ‚Ä¢ Collected: Apr 2025 ‚Ä¢ Consent: distant crowd photo',
        icon: { glyph: 'üåä', color: '#60a5fa' },
        video: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm'
      },
      {
        id: 'kurtulus',
        coords: [41.0536, 28.9888],
        location: 'Kurtulu≈ü (Tatavla), ≈ûi≈üli',
        title: 'Layers of Memory in a Changing Neighborhood',
        text: `Known historically as Tatavla, Kurtulu≈ü has long-standing Greek and Armenian roots. Today, it also hosts migrants from across Anatolia and the Middle East. Bakeries sell paskalya √ß√∂reƒüi beside Syrian kunafa; shop signs mix Turkish and Armenian lettering. Residents describe a quiet pride in everyday coexistence ‚Äî ‚Äúwe all have our routines, but the street belongs to everyone.‚Äù`,
        meta: 'Languages: TR ‚Ä¢ HY ‚Ä¢ EN ‚Ä¢ Collected: Mar 2025 ‚Ä¢ Consent: interview excerpts anonymized',
        icon: { glyph: 'üèòÔ∏è', color: '#f59e0b' },
        image: 'https://picsum.photos/id/1062/800/480'
      },
      {
        id: 'balat',
        coords: [41.0343, 28.9497],
        location: 'Balat, Fatih',
        title: 'Between Heritage and Instagram',
        text: `Balat‚Äôs colorful facades attract visitors, but behind the photos are synagogues, churches, and long-standing Jewish, Greek, and Armenian histories. New cafes run by recent migrants add to the soundscape ‚Äî Arabic pop next to Turkish rock, Hebrew greetings remembered by elders. Locals warn that the area‚Äôs visibility is a double-edged sword: tourism brings income, but raises rents and erodes the fragile social fabric.`,
        meta: 'Languages: TR ‚Ä¢ AR ‚Ä¢ legacy: HY ‚Ä¢ EL ‚Ä¢ Collected: Apr 2025 ‚Ä¢ Consent: no private interiors',
        icon: { glyph: 'üèõÔ∏è', color: '#c084fc' },
        image: 'https://picsum.photos/id/1043/800/480'
      },
      {
        id: 'uskudar',
        coords: [41.0257, 29.0153],
        location: '√úsk√ºdar ƒ∞skele Meydanƒ±',
        title: 'Transit Square, Shared Rituals',
        text: `At ferry time, √úsk√ºdar Square becomes a choreography of commuters, street vendors, and worshippers moving to and from nearby mosques and churches. Tea sellers switch languages with ease; vendors recommend halva in Arabic to newcomers breaking fast. It is a reminder that the city‚Äôs most multicultural spaces are often its thresholds ‚Äî places where people wait, meet, and pass through.`,
        meta: 'Languages: TR ‚Ä¢ AR ‚Ä¢ EN ‚Ä¢ Collected: May 2025 ‚Ä¢ Consent: public space, wide shots only',
        icon: { glyph: 'üïå', color: '#34d399' },
        image: 'https://picsum.photos/id/1056/800/480'
      },
      // --- New demo pins ---
      {
        id: 'karakoy_pier',
        coords: [41.0226, 28.9784],
        location: 'Karak√∂y ƒ∞skelesi, Beyoƒülu',
        title: 'Crossing Currents: Ferries, Fish, and Faith',
        text: `Between the pier and the fish stalls, Karak√∂y mixes office workers, tourists, and long-time residents. Calls to prayer blend with ferry announcements; seagulls circle above simit sellers. The waterfront is a daily ritual ‚Äî a threshold where arrivals and departures make the city feel both stable and in motion.`,
        meta: 'Languages: TR ‚Ä¢ EN ‚Ä¢ AR ‚Ä¢ Collected: May 2025 ‚Ä¢ Consent: public waterfront',
        icon: { glyph: '‚õ¥Ô∏è', color: '#22d3ee' },
        video: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm'
      },
      {
        id: 'spice_bazaar',
        coords: [41.0165, 28.9704],
        location: 'Mƒ±sƒ±r √áar≈üƒ±sƒ± (Spice Bazaar), Emin√∂n√º',
        title: 'Aromas and Accents under the Domes',
        text: `Vendors chant prices in Turkish and English, switching to Arabic or Russian when needed. Tourists bargain for saffron while locals pick up staples. The vaulted hall carries a constant murmur ‚Äî a sonic archive of trade languages.`,
        meta: 'Languages: TR ‚Ä¢ EN ‚Ä¢ AR ‚Ä¢ RU ‚Ä¢ Collected: May 2025 ‚Ä¢ Consent: indoor public, wide shots',
        icon: { glyph: 'üßÇ', color: '#f87171' },
        ambient: [
          { label: 'Restaurant ambience', volume: 0.25, loop: true,
            sources: [
              { src: 'https://upload.wikimedia.org/wikipedia/commons/b/b5/Restaurant_ambience.ogg', type: 'audio/ogg' },
              { src: 'https://upload.wikimedia.org/wikipedia/commons/transcoded/b/b5/Restaurant_ambience.ogg/Restaurant_ambience.ogg.mp3?download=', type: 'audio/mpeg' }
            ]
          }
        ]
      },
      {
        id: 'besiktas_market',
        coords: [41.0430, 29.0048],
        location: 'Be≈üikta≈ü √áar≈üƒ±sƒ±',
        title: 'Morning Rush, Nighttime Cheers',
        text: `From fishmonger shouts to evening chants after a big match, Be≈üikta≈ü‚Äôs market streets are a study in daily rhythms. Students, workers, and fans share pavements; Kurdish bakeries and Black Sea eateries line the lanes.`,
        meta: 'Languages: TR ‚Ä¢ KU ‚Ä¢ EN ‚Ä¢ Collected: May 2025 ‚Ä¢ Consent: street scenes only',
        icon: { glyph: 'üß∫', color: '#facc15' },
        image: 'https://picsum.photos/id/1003/800/480'
      }
    ];

    // --- Map setup ---
    const map = L.map('map', { zoomControl: false }).setView([41.02, 28.98], 12);
    L.control.zoom({ position: 'topright' }).addTo(map);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    const markerById = new Map();

    pins.forEach(p => {
      const m = L.marker(p.coords, { icon: makeIcon(p.icon || defaultIconSpec) }).addTo(map);
      // Build popup HTML with optional media
      let media = '';
      if (p.audio) {
        media += `<div style="margin:8px 0"><audio controls preload="none" style="width:100%" crossorigin="anonymous">
          <source src="${p.audio}">
          Your browser does not support the audio element.
        </audio></div>`;
      }
      if (p.video) {
        media += `<div style="margin:8px 0"><video controls preload="none" style="width:100%; max-height:220px;">
          <source src="${p.video}">
          Your browser does not support the video tag.
        </video></div>`;
      }
      if (p.image) {
        media += `<div style="margin:8px 0"><img src="${p.image}" alt="${p.title}" style="width:100%;height:auto;border-radius:10px;display:block;" loading="lazy"></div>`;
      }
      // Ambient mix UI
      let ambientUi = '';
      if (p.ambient && Array.isArray(p.ambient) && p.ambient.length) {
        const labels = p.ambient.map(t => t.label).join(', ');
        ambientUi = `
          <div id="amb-${p.id}">
            <button class="btn-ambient" type="button">Play ambience</button>
            <div class="amb-note">Mix: ${labels}. Click to start. (Loops; stops on close.)</div>
            <div class="amb-audios" style="display:none"></div>
            <div style="margin-top:6px;font-size:12px"><a href="${p.ambient[0].sources[0].src}" target="_blank" rel="noopener">Open a sample track in a new tab</a></div>
          </div>`;
      }
      m.bindPopup(`
        <h3 class="pin-title">${p.title}</h3>
        <div class="pin-body">${nl2br(p.text)}</div>
        ${media}
        ${ambientUi}
        <div class="pin-meta"><b>Location:</b> ${p.location}<br>${p.meta}</div>
      `);

      // Wire ambient mix on popup open
      m.on('popupopen', (e) => {
        if (!(p.ambient && Array.isArray(p.ambient) && p.ambient.length)) return;
        const root = e.popup._contentNode.querySelector(`#amb-${p.id}`);
        if (!root) return;
        const holder = root.querySelector('.amb-audios');
        if (!holder.dataset.ready) {
          p.ambient.forEach(tr => {
            const a = document.createElement('audio');
            a.preload = 'none';
            a.loop = !!tr.loop;
            a.volume = typeof tr.volume === 'number' ? tr.volume : 0.3;
            a.setAttribute('crossorigin','anonymous');
            (tr.sources || []).forEach(s => {
              const src = document.createElement('source');
              src.src = s.src; if (s.type) src.type = s.type; a.appendChild(src);
            });
            holder.appendChild(a);
          });
          holder.dataset.ready = '1';
        }
        const btn = root.querySelector('.btn-ambient');
        const audios = Array.from(holder.querySelectorAll('audio'));
        let playing = false;
        btn.onclick = async () => {
          try {
            if (!playing) {
              await Promise.all(audios.map(a => a.play()));
              playing = true; btn.textContent = 'Pause ambience';
            } else {
              audios.forEach(a => a.pause());
              playing = false; btn.textContent = 'Play ambience';
            }
          } catch (err) {
            btn.textContent = 'Tap to enable audio';
          }
        };
      });

      markerById.set(p.id, m);
    });

    // Icon factory
    function makeIcon(spec){
      const glyph = (spec && spec.glyph) || defaultIconSpec.glyph;
      const color = (spec && spec.color) || defaultIconSpec.color;
      return L.divIcon({
        className: 'ist-pin',
        html: `<div class="pin" style="--pin:${color}"><span class="glyph">${glyph}</span></div>`,
        iconSize: [36, 44],
        iconAnchor: [18, 44],
        popupAnchor: [0, -36]
      });
    }

    // --- Sidebar list ---
    const list = document.getElementById('pinList');
    pins.forEach((p, idx) => {
      const el = document.createElement('div');
      el.className = 'card';
      el.innerHTML = `
        <div class="title">${idx+1}. ${p.title}</div>
        <div class="meta">${p.location}</div>
      `;
      el.addEventListener('click', () => {
        map.flyTo(p.coords, 15, { duration: 1.2 });
        const marker = markerById.get(p.id);
        setTimeout(() => marker.openPopup(), 1250);
      });
      list.appendChild(el);
    });

    // Fit bounds to all pins on load
    const group = new L.featureGroup([...markerById.values()]);
    map.fitBounds(group.getBounds().pad(0.2));

    // Pause any media when a popup closes
    map.on('popupclose', (e) => {
      const node = e.popup && e.popup._contentNode;
      if (!node) return;
      node.querySelectorAll('audio, video').forEach(el => {
        try { el.pause(); el.currentTime = 0; } catch(_) {}
      });
    });

    // --- Minimal tests (console) ---
    (function runTests(){
      const name = 'Atlas Demo Tests';
      console.groupCollapsed(name);
      // newline conversion tests
      console.assert(nl2br('a\nb') === 'a<br>b', 'nl2br should convert single newline');
      console.assert(nl2br('a\n\nb') === 'a<br><br>b', 'nl2br should keep double newline as two <br>');
      console.assert(nl2br('no newlines') === 'no newlines', 'nl2br should leave plain text unchanged');
      console.assert(nl2br('') === '', 'nl2br should handle empty string');
      const sample = nl2br(pins[0].text);
      console.assert(sample.includes('<br>'), 'popup text should include <br> tags after conversion');

      // per-pin media constraints: at most one of image/video/audio/ambient
      const mediaKeys = ['video','image','audio','ambient'];
      pins.forEach(p => {
        const count = mediaKeys.reduce((acc, k) => {
          if (k === 'ambient') return acc + ((p.ambient && Array.isArray(p.ambient) && p.ambient.length) ? 1 : 0);
          return acc + (p[k] ? 1 : 0);
        }, 0);
        console.assert(count <= 1, `${p.id} should have at most 1 media, got ${count}`);
      });

      // specific expectations for this demo
      const byId = id => pins.find(p=>p.id===id);
      console.assert(byId('kumkapi').ambient && !byId('kumkapi').image && !byId('kumkapi').video, 'kumkapi should use ambient only');
      console.assert(byId('moda').video && !byId('moda').image, 'moda should use video only');
      console.assert(byId('kurtulus').image && !byId('kurtulus').video, 'kurtulus should use image only');
      console.assert(byId('karakoy_pier').video && !byId('karakoy_pier').image, 'karakoy_pier should use video only');
      console.assert(byId('spice_bazaar').ambient && !byId('spice_bazaar').video && !byId('spice_bazaar').image, 'spice_bazaar should use ambient only');

      // data integrity tests
      console.assert(pins.length === 8, 'there should be 8 demo pins');
      console.assert(pins[1] && pins[1].id === 'moda', 'second pin should be moda (checks for missing comma)');
      console.assert(typeof pins[1].video === 'string' && pins[1].video.length > 0, 'moda should have a sample video URL');
      // map instance smoke test
      console.assert(map && typeof map.setView === 'function', 'Leaflet map should be initialized');
      // presence tests for new pins
      const ids = pins.map(p=>p.id);
      console.assert(ids.includes('karakoy_pier') && ids.includes('spice_bazaar') && ids.includes('besiktas_market'), 'new pins should be present');
      // icon specs exist and use glyph+color
      pins.forEach(p => {
        const ic = p.icon || defaultIconSpec;
        console.assert(typeof ic.glyph === 'string' && ic.glyph.length > 0, `${p.id} should have a glyph`);
        console.assert(/^#?[0-9a-fA-F]{3,8}|rgb|hsl/.test(ic.color), `${p.id} should have a color string`);
      });
      // marker count equals pins count
      console.assert(markerById.size === pins.length, 'there should be one marker per pin');
      console.groupEnd(name);
    })();
  </script>
</body>
</html>
